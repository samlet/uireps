import '../fldconv.dart';
import 'morph/morph.dart';
import 'facility_conv.dart';


CREATE TABLE facility (
    "facility_id" VARCHAR(255) NOT NULL PRIMARY KEY,
    "facility_type_id" VARCHAR(22),
    "parent_facility_id" VARCHAR(22),
    "owner_party_id" VARCHAR(22),
    "default_inventory_item_type_id" VARCHAR(22),
    "facility_name" VARCHAR(100),
    "primary_facility_group_id" VARCHAR(22),
    "facility_size" DECIMAL(18,6),
    "facility_size_uom_id" VARCHAR(22),
    "product_store_id" VARCHAR(22),
    "default_days_to_ship" BIGINT,
    "opened_date" DATETIME(3),
    "closed_date" DATETIME(3),
    "description" VARCHAR(255),
    "default_dimension_uom_id" VARCHAR(22),
    "default_weight_uom_id" VARCHAR(22),
    "geo_point_id" VARCHAR(22),
    "facility_level" BIGINT,
    "last_updated_tx_stamp" DATETIME(3),
    "created_tx_stamp" DATETIME(3),
    "tenant_id" VARCHAR(22),
    "facility_erc_id" VARCHAR(22),
    "nft_erc" VARCHAR(22),
    "evict" BOOLEAN,
    "tag1" VARCHAR(100),
    "tag2" VARCHAR(100),
    "tag3" VARCHAR(100),
    "more_tags" TEXT MAPPED BY `const StringListConverter()`,
    "labels" TEXT MAPPED BY `const StringMultimapConverter()`,
    "acl" TEXT MAPPED BY `const StringMultimapConverter()`,
    "resource_id" VARCHAR(250),
    "resource_type" VARCHAR(60),
    "url" VARCHAR(2000),
    "image" TEXT MAPPED BY `const StringListConverter()`,
    "same_as" VARCHAR(2000),
    "icon" BIGINT,
    "color" BIGINT,

    -- rel: one (no public-types)
    "facility_type" TEXT MAPPED BY `const FacilityTypeConverter()`,

    -- rel: many
    "facility_calendar" TEXT MAPPED BY `const FacilityCalendarListConverter()`,
    "facility_multisig" TEXT MAPPED BY `const FacilityMultisigListConverter()`,
    "facility_geo_force" TEXT MAPPED BY `const FacilityGeoForceListConverter()`,
    "facility_attribute" TEXT MAPPED BY `const FacilityAttributeListConverter()`,
    "facility_contact_mech_purpose" TEXT MAPPED BY `const FacilityContactMechPurposeListConverter()`,
    "facility_location" TEXT MAPPED BY `const FacilityLocationListConverter()`,
    "facility_location_geo_point" TEXT MAPPED BY `const FacilityLocationGeoPointListConverter()`,
    "facility_content" TEXT MAPPED BY `const FacilityContentListConverter()`,
    "facility_contact_mech" TEXT MAPPED BY `const FacilityContactMechListConverter()`,
    "reserved_flag" INTEGER
);

allFacilities: SELECT * FROM facility;
clearFacilities: DELETE FROM facility;
addFacility: INSERT INTO facility $el;
getFacility: SELECT * FROM facility WHERE facility_id = ?;
deleteFacility: DELETE FROM facility WHERE facility_id = :id;
queryFacilitiesByResourceBinder: SELECT * FROM facility WHERE resource_type = :resType AND resource_id = :resId;




