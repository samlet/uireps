import '../fldconv.dart';
import 'morph/morph.dart';
import 'comment_conv.dart';


CREATE TABLE comment (
    "comment_id" VARCHAR(255) NOT NULL PRIMARY KEY,
    "posted_date_time" DATETIME(3),
    "rating" DECIMAL(18,6),
    "subject" VARCHAR(255),
    "review" TEXT,
    "user_login_id" VARCHAR(250),
    "reply_to" VARCHAR(250),
    "reply_to_comment_id" VARCHAR(22),
    "content_id" VARCHAR(22),
    "anchor" VARCHAR(100),
    "paragraph" INTEGER,
    "media_links" TEXT MAPPED BY `const StringMultimapConverter()`,
    "shared_links" TEXT MAPPED BY `const StringMultimapConverter()`,
    "claim_payment" DECIMAL(18,6),
    "payment_erc" VARCHAR(250),
    "wallet_id" VARCHAR(22),
    "tenant_id" VARCHAR(22),
    "last_updated_tx_stamp" DATETIME(3),
    "created_tx_stamp" DATETIME(3),
    "comment_type_id" VARCHAR(22),
    "status_id" VARCHAR(22),
    "evict" BOOLEAN,
    "acl" TEXT MAPPED BY `const StringMultimapConverter()`,
    "resource_id" VARCHAR(250),
    "resource_type" VARCHAR(60),

    -- rel: one (no public-types)
    "comment_type" TEXT MAPPED BY `const CommentTypeConverter()`,

    -- rel: many
    "comment_status" TEXT MAPPED BY `const CommentStatusListConverter()`,
    "reserved_flag" INTEGER
);

allComments: SELECT * FROM comment;
clearComments: DELETE FROM comment;
addComment: INSERT INTO comment $el;
getComment: SELECT * FROM comment WHERE comment_id = ?;
deleteComment: DELETE FROM comment WHERE comment_id = :id;
queryCommentsByResourceBinder: SELECT * FROM comment WHERE resource_type = :resType AND resource_id = :resId;




